//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace MetaAutomationClientMt
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IMetaAutomationService")]
    public interface IMetaAutomationService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/StartCheckRun", ReplyAction = "http://tempuri.org/IMetaAutomationService/StartCheckRunResponse")]
        string StartCheckRun(string checkRunLaunchXml);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/StartCheckRun", ReplyAction = "http://tempuri.org/IMetaAutomationService/StartCheckRunResponse")]
        System.Threading.Tasks.Task<string> StartCheckRunAsync(string checkRunLaunchXml);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/CompleteCheckRun", ReplyAction = "http://tempuri.org/IMetaAutomationService/CompleteCheckRunResponse")]
        string CompleteCheckRun(string checkRunArtifactXml);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/CompleteCheckRun", ReplyAction = "http://tempuri.org/IMetaAutomationService/CompleteCheckRunResponse")]
        System.Threading.Tasks.Task<string> CompleteCheckRunAsync(string checkRunArtifactXml);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/GetCheckRunArtifact", ReplyAction = "http://tempuri.org/IMetaAutomationService/GetCheckRunArtifactResponse")]
        string GetCheckRunArtifact(string uniqueLabelForCheckRunSegment);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/GetCheckRunArtifact", ReplyAction = "http://tempuri.org/IMetaAutomationService/GetCheckRunArtifactResponse")]
        System.Threading.Tasks.Task<string> GetCheckRunArtifactAsync(string uniqueLabelForCheckRunSegment);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/GetCheckRunLaunch", ReplyAction = "http://tempuri.org/IMetaAutomationService/GetCheckRunLaunchResponse")]
        string GetCheckRunLaunch(string uniqueLabelForCheckRunSegment);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/GetCheckRunLaunch", ReplyAction = "http://tempuri.org/IMetaAutomationService/GetCheckRunLaunchResponse")]
        System.Threading.Tasks.Task<string> GetCheckRunLaunchAsync(string uniqueLabelForCheckRunSegment);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/AbortCheckRun", ReplyAction = "http://tempuri.org/IMetaAutomationService/AbortCheckRunResponse")]
        string AbortCheckRun(string uniqueLabelForCheckRunSegment, string errorMessage);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/AbortCheckRun", ReplyAction = "http://tempuri.org/IMetaAutomationService/AbortCheckRunResponse")]
        System.Threading.Tasks.Task<string> AbortCheckRunAsync(string uniqueLabelForCheckRunSegment, string errorMessage);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/GetAbortMessage", ReplyAction = "http://tempuri.org/IMetaAutomationService/GetAbortMessageResponse")]
        string GetAbortMessage(string uniqueLabelForCheckRunSegment);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMetaAutomationService/GetAbortMessage", ReplyAction = "http://tempuri.org/IMetaAutomationService/GetAbortMessageResponse")]
        System.Threading.Tasks.Task<string> GetAbortMessageAsync(string uniqueLabelForCheckRunSegment);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMetaAutomationServiceChannel : IMetaAutomationService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MetaAutomationServiceClient : System.ServiceModel.ClientBase<IMetaAutomationService>, IMetaAutomationService
    {

        public MetaAutomationServiceClient()
        {
        }

        public MetaAutomationServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public MetaAutomationServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public MetaAutomationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public MetaAutomationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public string StartCheckRun(string checkRunLaunchXml)
        {
            return base.Channel.StartCheckRun(checkRunLaunchXml);
        }

        public System.Threading.Tasks.Task<string> StartCheckRunAsync(string checkRunLaunchXml)
        {
            return base.Channel.StartCheckRunAsync(checkRunLaunchXml);
        }

        public string CompleteCheckRun(string checkRunArtifactXml)
        {
            return base.Channel.CompleteCheckRun(checkRunArtifactXml);
        }

        public System.Threading.Tasks.Task<string> CompleteCheckRunAsync(string checkRunArtifactXml)
        {
            return base.Channel.CompleteCheckRunAsync(checkRunArtifactXml);
        }

        public string GetCheckRunArtifact(string uniqueLabelForCheckRunSegment)
        {
            return base.Channel.GetCheckRunArtifact(uniqueLabelForCheckRunSegment);
        }

        public System.Threading.Tasks.Task<string> GetCheckRunArtifactAsync(string uniqueLabelForCheckRunSegment)
        {
            return base.Channel.GetCheckRunArtifactAsync(uniqueLabelForCheckRunSegment);
        }

        public string GetCheckRunLaunch(string uniqueLabelForCheckRunSegment)
        {
            return base.Channel.GetCheckRunLaunch(uniqueLabelForCheckRunSegment);
        }

        public System.Threading.Tasks.Task<string> GetCheckRunLaunchAsync(string uniqueLabelForCheckRunSegment)
        {
            return base.Channel.GetCheckRunLaunchAsync(uniqueLabelForCheckRunSegment);
        }

        public string AbortCheckRun(string uniqueLabelForCheckRunSegment, string errorMessage)
        {
            return base.Channel.AbortCheckRun(uniqueLabelForCheckRunSegment, errorMessage);
        }

        public System.Threading.Tasks.Task<string> AbortCheckRunAsync(string uniqueLabelForCheckRunSegment, string errorMessage)
        {
            return base.Channel.AbortCheckRunAsync(uniqueLabelForCheckRunSegment, errorMessage);
        }

        public string GetAbortMessage(string uniqueLabelForCheckRunSegment)
        {
            return base.Channel.GetAbortMessage(uniqueLabelForCheckRunSegment);
        }

        public System.Threading.Tasks.Task<string> GetAbortMessageAsync(string uniqueLabelForCheckRunSegment)
        {
            return base.Channel.GetAbortMessageAsync(uniqueLabelForCheckRunSegment);
        }
    }
}

